/*
Copyright 2018 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package utils

import (
	"bytes"
	"strings"
	"testing"

	. "gopkg.in/check.v1"
)

func TestUtils(t *testing.T) { TestingT(t) }

type UtilsSuite struct {
}

var _ = Suite(&UtilsSuite{})

func (s *UtilsSuite) TestHosts(c *C) {
	tcs := []struct {
		expected string
		comment  string
		entries  []HostEntry
	}{
		{
			expected: "127.0.0.1 example.com\n",
			entries:  []HostEntry{{Hostnames: "example.com", IP: "127.0.0.1"}},
			comment:  "Inserts new entry",
		},
		{
			expected: `127.0.0.1 example.com example
127.0.0.5 master master.debian.org
`,
			entries: []HostEntry{
				{Hostnames: "example.com example", IP: "127.0.0.1"},
				{Hostnames: "master master.debian.org", IP: "127.0.0.5"},
			},
			comment: "Inserts multiple entries",
		},
	}
	for _, tc := range tcs {
		buf := &bytes.Buffer{}
		err := WriteHosts(buf, tc.entries)
		c.Assert(err, IsNil)
		c.Assert(buf.String(), Equals, tc.expected, Commentf(tc.comment))
	}
}

func (s *UtilsSuite) TestDNS(c *C) {
	var tcs = []struct {
		input  string
		output string
		want   *DNSConfig
	}{
		{
			input: `# /etc/resolv.conf

domain localdomain
nameserver 8.8.8.8
nameserver 2001:4860:4860::8888
nameserver fe80::1%lo0
options ndots:5 timeout:10 attempts:3 rotate
options attempts 3
`,
			output: `domain localdomain
nameserver 8.8.8.8
nameserver 2001:4860:4860::8888
nameserver fe80::1%lo0
options ndots:5 timeout:10 attempts:3 rotate
`,
			want: &DNSConfig{
				Servers:    []string{"8.8.8.8", "2001:4860:4860::8888", "fe80::1%lo0"},
				Search:     []string{"localdomain"},
				Domain:     "localdomain",
				Ndots:      5,
				Timeout:    10,
				Attempts:   3,
				Rotate:     true,
				UnknownOpt: true, // the "options attempts 3" line
			},
		},
		{
			input: `# /etc/resolv.conf

search test invalid
domain localdomain
nameserver 8.8.8.8
`,
			output: `domain localdomain
nameserver 8.8.8.8
options ndots:1 timeout:5 attempts:2
`,
			want: &DNSConfig{
				Servers:  []string{"8.8.8.8"},
				Search:   []string{"localdomain"},
				Domain:   "localdomain",
				Ndots:    1,
				Timeout:  5,
				Attempts: 2,
			},
		},
		{
			input: `# /etc/resolv.conf

domain localdomain
search test invalid
nameserver 8.8.8.8
`,
			output: `domain localdomain
search test invalid
nameserver 8.8.8.8
options ndots:1 timeout:5 attempts:2
`,
			want: &DNSConfig{
				Servers:  []string{"8.8.8.8"},
				Search:   []string{"test", "invalid"},
				Domain:   "localdomain",
				Ndots:    1,
				Timeout:  5,
				Attempts: 2,
			},
		},
		{
			input: `# /etc/resolv.conf
`,
			output: `options ndots:1 timeout:5 attempts:2
`,
			want: &DNSConfig{
				Ndots:    1,
				Timeout:  5,
				Attempts: 2,
			},
		},
		{
			input: `# Generated by vio0 dhclient
search c.symbolic-datum-552.internal.
nameserver 169.254.169.254
nameserver 10.240.0.1
lookup file bind
`,
			output: `search c.symbolic-datum-552.internal.
nameserver 169.254.169.254
nameserver 10.240.0.1
options ndots:1 timeout:5 attempts:2
lookup file bind
`,
			want: &DNSConfig{
				Ndots:    1,
				Timeout:  5,
				Attempts: 2,
				Lookup:   []string{"file", "bind"},
				Servers:  []string{"169.254.169.254", "10.240.0.1"},
				Search:   []string{"c.symbolic-datum-552.internal."},
			},
		},
	}
	for i, tc := range tcs {
		comment := Commentf("test #%d (%v)", i+1)
		config, err := DNSReadConfig(strings.NewReader(tc.input))
		c.Assert(err, IsNil, comment)
		c.Assert(config, DeepEquals, tc.want, comment)
		c.Assert(config.String(), Equals, tc.output, comment)
	}
}
