---
kind: pipeline
type: kubernetes
name: pr

trigger:
  event:
  - pull_request

steps:
  - name: fetch tags
    image: docker:git
    commands:
      - git fetch --tags
  - name: wait for docker
    image: docker
    commands:
      - timeout 15s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
      - docker version
    volumes:
      - name: dockersock
        path: /var/run
  - name: build buildbox
    image: docker:git
    commands:
      - apk add --no-cache make
      - make buildbox
    volumes:
      - name: dockersock
        path: /var/run
  - name: build tarball
    image: docker:git
    commands:
      - apk add --no-cache make fakeroot
      - make production
    volumes:
      - name: dockersock
        path: /var/run

services:
  - name: run docker daemon
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

---
kind: pipeline
type: kubernetes
name: publish

trigger:
  event:
  - tag

steps:
  - name: fetch tags
    image: docker:git
    commands:
      - git fetch --tags
  - name: assume aws role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: AWS_ROLE
    commands:
    - aws sts get-caller-identity
    - SESSION_NAME=$(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g")
    - |
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name "$SESSION_NAME" \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity
    volumes:
      - name: awsconfig
        path: /root/.aws
  - name: wait for docker
    image: docker
    commands:
      - timeout 15s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
      - docker version
    volumes:
      - name: dockersock
        path: /var/run
  - name: build buildbox
    image: docker:git
    commands:
      - apk add --no-cache make
      - make buildbox
    volumes:
      - name: dockersock
        path: /var/run
  - name: build tarball
    image: docker:git
    commands:
      - apk add --no-cache make fakeroot
      - make production
    volumes:
      - name: dockersock
        path: /var/run
  - name: publish
    image: docker:git
    environment:
      REGISTRY_USERNAME:
        from_secret: QUAY_USERNAME
      REGISTRY_PASSWORD:
        from_secret: QUAY_PASSWORD
      AWS_DEFAULT_REGION: us-east-1
    commands:
      - apk add --no-cache make aws-cli
      - docker login -u="$REGISTRY_USERNAME" -p="$REGISTRY_PASSWORD" quay.io
      - make deploy
    volumes:
      - name: awsconfig
        path: /root/.aws
      - name: dockersock
        path: /var/run

services:
  - name: run docker daemon
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}
  - name: awsconfig
    temp: {}

---
kind: pipeline
type: kubernetes
name: dev-publish

trigger:
  event:
  - custom

steps:
  - name: fetch tags
    image: docker:git
    commands:
      - git fetch --tags
  - name: assume aws role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: AWS_ROLE
    commands:
    - aws sts get-caller-identity
    - SESSION_NAME=$(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g")
    - |
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name "$SESSION_NAME" \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity
    volumes:
      - name: awsconfig
        path: /root/.aws
  - name: wait for docker
    image: docker
    commands:
      - timeout 15s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
      - docker version
    volumes:
      - name: dockersock
        path: /var/run
  - name: build buildbox
    image: docker:git
    commands:
      - apk add --no-cache make
      - make buildbox
    volumes:
      - name: dockersock
        path: /var/run
  - name: build tarball
    image: docker:git
    commands:
      - apk add --no-cache make fakeroot
      - make production
    volumes:
      - name: dockersock
        path: /var/run
  - name: publish to s3
    image: docker:git
    environment:
      AWS_DEFAULT_REGION: us-east-1
    commands:
      - apk add --no-cache make aws-cli
      - make dev-deploy
    volumes:
      - name: awsconfig
        path: /root/.aws
      - name: dockersock
        path: /var/run

services:
  - name: run docker daemon
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}
  - name: awsconfig
    temp: {}

---
kind: signature
hmac: 2539529605c773083914b67f78654523c153392d55907966ce3fe1b7cea7905c

...
